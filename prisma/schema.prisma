// This is your Prisma schema file,
// client session generator
generator client {
  provider = "prisma-client-js"
}

// database connection witht he connection string from the .env file
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// user schema
model User {
  id          Int                @id @default(autoincrement())
  email       String             @unique
  phone       Int?
  firstname   String
  lastName    String
  social      Json
  courses     courseEnrollment[]
  testResults TestResult[]       @relation(name: "results")
  testResult  TestResult[]       @relation(name: "graded")
}

// course schema
model Course {
  id            Int                @id @default(autoincrement())
  name          String
  courseDetails String
  members       courseEnrollment[]
  tests         Test[]
}

enum UserRole {
  STUDENT
  TEACHER
}

model courseEnrollment {
  createdAt DateTime @default(now())
  role      UserRole

  userId   Int
  user     User   @relation(fields: [userId], references: [id]) // this will create a relation with some references for the user modek
  courseId Int
  course   Course @relation(fields: [courseId], references: [id])

  // assuring the combinations are unique for the used relations 
  @@id([userId, courseId, role]) // compund primary key
}

// test | exams
model Test {
  id         Int          @id @default(autoincrement())
  updatedAt  DateTime     @updatedAt
  name       String
  date       DateTime
  courseID   Int
  course     Course       @relation(fields: [courseID], references: [id])
  testResult TestResult[]
}

model TestResult {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  result    Int // as percentage
  testId    Int
  test      Test     @relation(fields: [testId], references: [id])

  studentId Int
  student   User @relation(name: "results", fields: [studentId], references: [id])

  gradedId Int
  gradedBy User @relation(name: "graded", fields: [gradedId], references: [id])
  // User     User? @relation(fields: [userId], references: [id])
  // userId   Int?
}
